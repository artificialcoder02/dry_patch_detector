# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Detector_PluginDialog
                                 A QGIS plugin
 This plugin will detect dry patches of land
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-12-11
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Vanisha B
        email                : vanishaburagohain@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
from importlib import import_module
from qgis.gui import QgsGui
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtWidgets import QDockWidget,QWidget, QMessageBox
from qgis.PyQt.QtWidgets import QDialog, QVBoxLayout, QLabel, QLineEdit, QPushButton, QComboBox, QSpinBox, QCheckBox, QFileDialog, QListWidget
from qgis.core import QgsProject, QgsMapLayer, QgsMapLayerType, QgsApplication
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'detector_dialog_base.ui'))


class Detector_PluginDialog(QDockWidget, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(Detector_PluginDialog, self).__init__(parent)
        self.iface = iface
        self.setupUi(self)

        # Additional code for the QDockWidget
        self.setWindowTitle("Object Detector Plugin")
        self.setAllowedAreas(Qt.LeftDockWidgetArea | Qt.RightDockWidgetArea)

        # Add labels, buttons, etc., to the layout
        self.mModelPathLabel = QLabel('YOLOv7 Model Path:')
        self.mModelPathLineEdit = QLineEdit()
        self.mModelPathButton = QPushButton('Browse')
        self.mMapLayerLabel = QLabel('Select Raster Layer:')
        self.mMapLayerComboBox = QComboBox()
        self.mInferenceSizeLabel = QLabel('Inference Size:')
        self.mInferenceSizeSpinBox = QSpinBox()
        self.mInferenceSizeSpinBox.setMaximum(999)  # You can set a higher maximum value as needed
        self.mInferenceSizeSpinBox.setValue(640)
        self.mConfidenceThresLabel = QLabel('Confidence Threshold:')
        self.mConfidenceThresSpinBox = QSpinBox()
        self.mIOUThresLabel = QLabel('IOU Threshold:')
        self.mIOUThresSpinBox = QSpinBox()
        self.mAugmentCheckBox = QCheckBox('Augment Images')
        self.mDeviceLabel = QLabel('Device:')
        self.mDeviceLineEdit = QLineEdit()
        self.mRunButton = QPushButton('Run Detection')
        

        # Set up your UI layout
        layout = QVBoxLayout()
        layout.addWidget(self.mModelPathLabel)
        layout.addWidget(self.mModelPathLineEdit)
        layout.addWidget(self.mModelPathButton)
        layout.addWidget(self.mMapLayerLabel)
        layout.addWidget(self.mMapLayerComboBox)
        layout.addWidget(self.mInferenceSizeLabel)
        layout.addWidget(self.mInferenceSizeSpinBox)
        layout.addWidget(self.mConfidenceThresLabel)
        layout.addWidget(self.mConfidenceThresSpinBox)
        layout.addWidget(self.mIOUThresLabel)
        layout.addWidget(self.mIOUThresSpinBox)
        layout.addWidget(self.mAugmentCheckBox)
        layout.addWidget(self.mDeviceLabel)
        layout.addWidget(self.mDeviceLineEdit)
        layout.addWidget(self.mRunButton)

        # Set the layout for the dock widget
        container = QWidget()
        container.setLayout(layout)
        self.setWidget(container)

        # Connect your buttons to functions
        self.mModelPathButton.clicked.connect(self.selectModelFile)
        self.mRunButton.clicked.connect(self.runDetection)

        # Populate the combo box with raster layers
        self.populateRasterLayers()

        # Connect the combo box change event
        self.mMapLayerComboBox.currentIndexChanged.connect(self.onComboBoxChange)

    def populateRasterLayers(self):
        # Get a list of all raster layers in the project
        raster_layers = QgsProject.instance().mapLayers().values()

        # Filter out only raster layers
        raster_layers = [layer for layer in raster_layers if layer.type() == QgsMapLayer.RasterLayer]

        # Add each raster layer to the combo box
        for layer in raster_layers:
            self.mMapLayerComboBox.addItem(layer.name(), layer)

    def onComboBoxChange(self, index):
        # Get the selected raster layer from the combo box
        selected_layer = self.mMapLayerComboBox.currentData()

        # Add a print statement to check the selected layer
        print("Selected Layer:", selected_layer)

        # Do something with the selected layer, e.g., print its name
        if selected_layer:
            print("Selected Layer Name:", selected_layer.name())
        else:
            print("No layer selected.")


    def selectModelFile(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        model_file, _ = QFileDialog.getOpenFileName(self, "Select YOLOv7 ONNX Model", "", "ONNX Files (*.onnx);;All Files (*)", options=options)
        print("Selected Model File:", model_file)

        if model_file:
            self.mModelPathLineEdit.setText(model_file)

    def runDetection(self):
        from .detector import Detector_Plugin
        main_window = self
        plugin_instance = main_window.findChild(Detector_Plugin)

        if plugin_instance is not None:
            yolov7_utils = import_module('.yolov7_utils', 'detector')
            yolov7_utils.run_yolov7_detection(plugin_instance)
        else:
            QMessageBox.critical(self, "Error", "Failed to find the main plugin instance.")







