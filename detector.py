# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Detector_Plugin
                                 A QGIS plugin
 This plugin will detect dry patches of land
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-12-11
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Vanisha B
        email                : vanishaburagohain@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import sys
print(sys.path)

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
import cv2
import numpy as np
import onnxruntime
import random
import torch
from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QFileDialog, QListWidgetItem
from qgis.core import QgsProject, QgsMapLayer, QgsRasterLayer, QgsMessageLog, QgsMapLayerType, QgsRectangle, QgsGeometry, QgsFeature, Qgis
from detector_utils import load_onnx_model
from .experimental import attempt_load

from detector.utils.general import non_max_suppression, scale_coords, xyxy2xywh
from detector.utils.torch_utils import select_device, time_synchronized
from detector.utils.google_utils import gsutil_getsize


# Initialize Qt resources from file resources.py
from .resources import *
import os.path


class Detector_Plugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Detector_Plugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Object Detector')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.dockwidget = None 
        self.data_folder = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Detector_Plugin', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/detector/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Object detection'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Object Detector'),
                action)
            self.iface.removeToolBarIcon(action)

    def set_data_folder(self, folder):
        # Set the data folder
        self.data_folder = folder

    
    def selectModelFile(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        model_file, _ = QFileDialog.getOpenFileName(self.iface.mainWindow(),
                                                    "Select YOLOv7 ONNX Model",
                                                    "",
                                                    "ONNX Files (*.onnx);;All Files (*)",
                                                    options=options)
        if model_file:
            self.dockwidget.mModelPathLineEdit.setText(model_file)

    def get_current_raster_layer(self):
        selected_layer_data = self.dockwidget.mMapLayerComboBox.currentData()

        if selected_layer_data:
            # Check if the selected layer is a raster layer with a common image extension
            selected_layer = selected_layer_data
            image_extensions = ['.png', '.jpg', '.jpeg', '.tiff', '.tif']
            if selected_layer.type() == QgsMapLayerType.RasterLayer and os.path.splitext(selected_layer.source())[1].lower() in image_extensions:
                return selected_layer

        return None



    def run_yolov7_detection(self):
        # Get the selected model file path and raster layer
        model_file = self.dockwidget.mModelPathLineEdit.text()
        layer = self.get_current_raster_layer()

        print("Model File:", model_file)
        print("Selected Layer:", layer)

        if layer is None:
            QMessageBox.warning(self.dockwidget, "Error", "Please select a valid raster layer.")
            return

        # Load the ONNX model
        onnx_model = load_onnx_model(model_file)

        # Perform YOLOv7 detection for the selected raster layer
        try:
            # Replace this with your YOLOv7 inference logic
            detections = self.run_yolov7_inference(onnx_model, layer)

            # Process and visualize the detections (replace this with your specific logic)
            self.process_and_visualize_detections(layer, detections)

        except Exception as e:
            QMessageBox.critical(self.dockwidget, "Error", f"Error during YOLOv7 inference: {str(e)}")

    def run_yolov7_inference(self, model, layer):
        # Get names and colors
        names = model.module.names if hasattr(model, 'module') else model.names
        colors = [[random.randint(0, 255) for _ in range(3)] for _ in names]

        # Set up YOLOv7 parameters
        imgsz = self.dockwidget.mInferenceSizeSpinBox.value()
        conf_thres = self.dockwidget.mConfidenceThresSpinBox.value()
        iou_thres = self.dockwidget.mIOUThresSpinBox.value()
        augment = self.dockwidget.mAugmentCheckBox.isChecked()

        # Define device
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

        # Read raster layer
        # Note: This is a simple example assuming a single-band raster layer. Adapt as needed for multi-band layers.
        provider = layer.dataProvider()
        _, image_data = provider.readPixels(0, 0, layer.width(), layer.height())
        image = image_data.reshape(layer.height(), layer.width())

        # Preprocess the image (replace this with your preprocessing logic)
        img = torch.from_numpy(image).to(device)
        img = img.float()  # uint8 to float32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0
        if img.ndimension() == 2:
            img = img.unsqueeze(0).unsqueeze(0)
        elif img.ndimension() == 3:
            img = img.unsqueeze(0)

        # Warmup
        model(img)

        # Inference
        t1 = time_synchronized()
        with torch.no_grad():   # Calculating gradients would cause a GPU memory leak
            pred = model(img, augment=augment)[0]
        t2 = time_synchronized()

        # Apply NMS
        pred = non_max_suppression(pred, conf_thres, iou_thres, agnostic=False)
        t3 = time_synchronized()

        # Process detections
        detections = []
        for i, det in enumerate(pred):  # detections per image
            if len(det):
                # Rescale boxes from img_size to im0 size
                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], (layer.width(), layer.height())).round()

                # Add detections to the list
                for *xyxy, conf, cls in reversed(det):
                    xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / torch.tensor([layer.width(), layer.height(), layer.width(), layer.height()])).view(-1).tolist()  # normalized xywh
                    detections.append({'bbox': xyxy, 'confidence': conf.item(), 'class_label': int(cls), 'class_name': names[int(cls)], 'color': colors[int(cls)]})

        return detections


    def process_and_visualize_detections(self, layer, detections):
        # Replace this with your logic to visualize the detections on the layer
        # You can use the QgsMapLayerEditUtils class to add a new temporary scratch layer and add features to it
        # Here's a simple example that adds rectangles for each detection to a temporary scratch layer:

        temp_layer = QgsRasterLayer("Polygon?crs=EPSG:4326", "Temporary Detections", "memory")
        temp_layer.startEditing()

        for det in detections:
            bbox = det['bbox']
            rect = QgsRectangle(bbox[0], bbox[1], bbox[2], bbox[3])
            poly = QgsGeometry.fromRect(rect)
            feat = QgsFeature()
            feat.setGeometry(poly)
            temp_layer.addFeature(feat)

        temp_layer.commitChanges()

        QgsProject.instance().addMapLayer(temp_layer)

    def run(self):
        from .detector_dialog import Detector_PluginDialog
        if self.first_start or self.dockwidget is None:
            self.first_start = False
            self.dockwidget = Detector_PluginDialog(self.iface.mainWindow())  # Use mainWindow() as the parent
            if hasattr(self.dockwidget, 'set_data_folder'):
                self.dockwidget.set_data_folder(os.path.join(self.plugin_dir, 'data'))
            else:
                QgsMessageLog.logMessage("set_data_folder method not found", 'Detector Plugin', Qgis.Warning)

            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.mRunButton.clicked.connect(self.run_yolov7_detection)
            self.dockwidget.mModelPathButton.clicked.connect(self.selectModelFile)
        
            # Ensure the correct attribute name is used to access the combo box
            if hasattr(self.dockwidget, 'mMapLayerComboBox'):
                self.dockwidget.mMapLayerComboBox.currentIndexChanged.connect(self.dockwidget.onComboBoxChange)
            else:
                QgsMessageLog.logMessage("mMapLayerComboBox not found in the dockwidget", 'Detector Plugin', Qgis.Warning)

           


        self.dockwidget.show()

   